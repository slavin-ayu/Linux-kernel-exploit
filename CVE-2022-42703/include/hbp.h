#pragma once

#include <stdint.h>
#include <stdbool.h>
#include <sys/user.h>

#define EXCEPTION_STKSZ (PAGE_SIZE << 1)
#define optional_stack_size EXCEPTION_STKSZ
#define IO_BITMAP_LONGS (0x400)

#define DR_OFFSET(n) (offsetof(struct user, u_debugreg) + n * sizeof(unsigned long))

extern char *map;

struct cpu_entry_area {
    char gdt[PAGE_SIZE];
    struct entry_stack_page {
        struct entry_stack {
            char stack[PAGE_SIZE];
        } stack;
    } entry_stack_page __attribute__((__aligned__(PAGE_SIZE)));
    struct tss_struct {
        struct x86_hw_tss {
	        uint32_t reserved1;
	        uint64_t sp0;
	        uint64_t sp1;
	        uint64_t sp2;
	        uint64_t reserved2;
	        uint64_t ist[7];
	        uint32_t reserved3;
	        uint32_t reserved4;
	        uint16_t reserved5;
	        uint16_t io_bitmap_base;
        } x86_tss __attribute__((packed));
        struct x86_io_bitmap {
	        uint64_t prev_sequence;
	        unsigned int prev_max;
	        unsigned long bitmap[IO_BITMAP_LONGS + 1];
	        unsigned long mapall[IO_BITMAP_LONGS + 1];
        } io_bitmap;
    } tss __attribute__((__aligned__(PAGE_SIZE)));
    struct cea_exception_stacks {
        char DF_stack_guard[PAGE_SIZE];
	    char DF_stack[EXCEPTION_STKSZ];
	    char NMI_stack_guard[PAGE_SIZE];
	    char NMI_stack[EXCEPTION_STKSZ];	
	    char DB_stack_guard[PAGE_SIZE];
	    char DB_stack[EXCEPTION_STKSZ];
	    char MCE_stack_guard[PAGE_SIZE];
	    char MCE_stack[EXCEPTION_STKSZ];
	    char VC_stack_guard[PAGE_SIZE];
	    char VC_stack[optional_stack_size];
	    char VC2_stack_guard[PAGE_SIZE];
	    char VC2_stack[optional_stack_size];
	    char IST_top_guard[PAGE_SIZE];
    } estacks;
    struct debug_store {
	    uint64_t bts_buffer_base;
	    uint64_t bts_index;
	    uint64_t bts_absolute_maximum;
	    uint64_t bts_interrupt_threshold;
	    uint64_t pebs_buffer_base;
	    uint64_t pebs_index;
	    uint64_t pebs_absolute_maximum;
	    uint64_t pebs_interrupt_threshold;
	    uint64_t pebs_event_reset[48];
    } cpu_debug_store __attribute__((__aligned__(PAGE_SIZE)));
    struct debug_store_buffers {
	    char bts_buffer[PAGE_SIZE << 4];
	    char pebs_buffer[PAGE_SIZE << 4];
    } cpu_debug_buffers;
} __attribute__((__aligned__(4096)));
#define __AC(X,Y) (X##Y)
#define _AC(X,Y) __AC(X,Y)
#define CPU_ENTRY_AREA_PGD _AC(-4, UL)
#define P4D_SHIFT 39
#define CPU_ENTRY_AREA_BASE (CPU_ENTRY_AREA_PGD << P4D_SHIFT)

struct cpu_entry_area *cea_by_cpu(int cpu);
void create_hbp(void *addr);
void hbp_fire();
void init(unsigned cpu);
void teardown();
bool attempt_read();
int hbp_exp();